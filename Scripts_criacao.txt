
-- CRIAÇÃO DAS TABELAS DO BANCO
CREATE TABLE PREDIO (
ID_PREDIO SERIAL PRIMARY KEY,
ENDERECO VARCHAR(255) NOT NULL
);
-- Tabela FUNCIONARIO
CREATE TABLE FUNCIONARIO (
COD_FUNCIONARIO SERIAL PRIMARY KEY,
NOME VARCHAR(255) NOT NULL,
IS_INSPETOR BOOLEAN NOT NULL DEFAULT FALSE,
EM_PLANTAO BOOLEAN NOT NULL DEFAULT FALSE
);
-- Tabela INSPETOR
CREATE TABLE INSPETOR (
COD_INSPETOR SERIAL PRIMARY KEY,
COD_FUNCIONARIO INT UNIQUE REFERENCES
FUNCIONARIO(COD_FUNCIONARIO) ON DELETE CASCADE
);
-- Tabela CAMERA
CREATE TABLE CAMERA (
ID_CAMERA SERIAL PRIMARY KEY,
ID_PREDIO INT NOT NULL REFERENCES PREDIO(ID_PREDIO) ON DELETE
CASCADE,
DESCRICAO VARCHAR(255)
);
-- Tabela EVENTO
CREATE TABLE EVENTO (
ID_EVENTO SERIAL PRIMARY KEY,
DESCRICAO VARCHAR(255),
DATA_DE_EVENTO TIMESTAMP NOT NULL,
TIPO_DE_EVENTO VARCHAR(255) NOT NULL
);
-- Tabela CAMERA_EVENTO
CREATE TABLE CAMERA_EVENTO (
ID_CAMERA INT NOT NULL REFERENCES CAMERA(ID_CAMERA) ON DELETE
CASCADE,
ID_EVENTO INT NOT NULL REFERENCES EVENTO(ID_EVENTO) ON DELETE
CASCADE,
PRIMARY KEY (ID_CAMERA, ID_EVENTO)
);

-- Tabela REGISTRO_MONITORAMENTO
CREATE TABLE REGISTRO_MONITORAMENTO (
ID_REGISTRO SERIAL PRIMARY KEY,
COD_FUNCIONARIO INT NOT NULL REFERENCES
FUNCIONARIO(COD_FUNCIONARIO) ON DELETE CASCADE,
ID_PREDIO INT NOT NULL REFERENCES PREDIO(ID_PREDIO) ON DELETE
CASCADE,
PLANTAO TIMESTAMP NOT NULL,
ID_EVENTO INT NOT NULL REFERENCES EVENTO(ID_EVENTO) ON DELETE
CASCADE
);
-- Tabela MONITORAMENTO
CREATE TABLE MONITORAMENTO (
ID_MONITORAMENTO SERIAL PRIMARY KEY,
COD_FUNCIONARIO INT NOT NULL REFERENCES
FUNCIONARIO(COD_FUNCIONARIO) ON DELETE CASCADE,
ID_PREDIO INT NOT NULL REFERENCES PREDIO(ID_PREDIO) ON DELETE
CASCADE,
PLANTAO TIMESTAMP NOT NULL
);

--INSERTS POR TABELA
INSERT INTO PREDIO (ENDERECO) VALUES ('Rua das Flores, 123');
INSERT INTO PREDIO (ENDERECO) VALUES ('Avenida Paulista, 456');
INSERT INTO PREDIO (ENDERECO) VALUES ('Praça da Sé, 789');
INSERT INTO PREDIO (ENDERECO) VALUES ('Rua da Consolação, 101');
INSERT INTO PREDIO (ENDERECO) VALUES ('Rua Augusta, 202');
INSERT INTO PREDIO (ENDERECO) VALUES ('Avenida Brasil, 303');
INSERT INTO PREDIO (ENDERECO) VALUES ('Rua do Ouvidor, 404');
INSERT INTO PREDIO (ENDERECO) VALUES ('Avenida Ipiranga, 505');
INSERT INTO PREDIO (ENDERECO) VALUES ('Rua do Catete, 606');
INSERT INTO PREDIO (ENDERECO) VALUES ('Avenida das Nações, 707');

INSERT INTO FUNCIONARIO (NOME, IS_INSPETOR, EM_PLANTAO) VALUES ('João
Silva', FALSE, TRUE);
INSERT INTO FUNCIONARIO (NOME, IS_INSPETOR, EM_PLANTAO) VALUES ('Maria
Oliveira', TRUE, FALSE);
INSERT INTO FUNCIONARIO (NOME, IS_INSPETOR, EM_PLANTAO) VALUES ('Pedro
Santos', FALSE, TRUE);
INSERT INTO FUNCIONARIO (NOME, IS_INSPETOR, EM_PLANTAO) VALUES ('Ana
Costa', TRUE, TRUE);

INSERT INTO FUNCIONARIO (NOME, IS_INSPETOR, EM_PLANTAO) VALUES ('Lucas
Pereira', FALSE, FALSE);
INSERT INTO FUNCIONARIO (NOME, IS_INSPETOR, EM_PLANTAO) VALUES ('Juliana
Lima', TRUE, TRUE);
INSERT INTO FUNCIONARIO (NOME, IS_INSPETOR, EM_PLANTAO) VALUES ('Carlos
Almeida', FALSE, TRUE);
INSERT INTO FUNCIONARIO (NOME, IS_INSPETOR, EM_PLANTAO) VALUES
('Fernanda Silva', TRUE, FALSE);
INSERT INTO FUNCIONARIO (NOME, IS_INSPETOR, EM_PLANTAO) VALUES ('Rafael
Sousa', FALSE, FALSE);
INSERT INTO FUNCIONARIO (NOME, IS_INSPETOR, EM_PLANTAO) VALUES ('Patrícia
Santos', TRUE, TRUE);

INSERT INTO INSPETOR (COD_FUNCIONARIO) VALUES (2);
INSERT INTO INSPETOR (COD_FUNCIONARIO) VALUES (4);
INSERT INTO INSPETOR (COD_FUNCIONARIO) VALUES (6);
INSERT INTO INSPETOR (COD_FUNCIONARIO) VALUES (8);
INSERT INTO INSPETOR (COD_FUNCIONARIO) VALUES (10);

INSERT INTO CAMERA (ID_PREDIO, DESCRICAO) VALUES (1, 'Câmera Principal - Hall');
INSERT INTO CAMERA (ID_PREDIO, DESCRICAO) VALUES (1, 'Câmera Secundária -
Corredor');
INSERT INTO CAMERA (ID_PREDIO, DESCRICAO) VALUES (2, 'Câmera Principal -
Entrada');
INSERT INTO CAMERA (ID_PREDIO, DESCRICAO) VALUES (2, 'Câmera Secundária -
Estacionamento');
INSERT INTO CAMERA (ID_PREDIO, DESCRICAO) VALUES (3, 'Câmera Principal -
Lobby');
INSERT INTO CAMERA (ID_PREDIO, DESCRICAO) VALUES (4, 'Câmera Principal -
Recepção');
INSERT INTO CAMERA (ID_PREDIO, DESCRICAO) VALUES (5, 'Câmera Secundária -
Escada');
INSERT INTO CAMERA (ID_PREDIO, DESCRICAO) VALUES (6, 'Câmera Principal - Saída
de Emergência');
INSERT INTO CAMERA (ID_PREDIO, DESCRICAO) VALUES (7, 'Câmera Principal -
Jardim');
INSERT INTO CAMERA (ID_PREDIO, DESCRICAO) VALUES (8, 'Câmera Secundária -
Laterais');
INSERT INTO EVENTO (DESCRICAO, DATA_DE_EVENTO, TIPO_DE_EVENTO) VALUES
('Movimento detectado', '2023-09-10 14:30:00', 'Intrusão');
INSERT INTO EVENTO (DESCRICAO, DATA_DE_EVENTO, TIPO_DE_EVENTO) VALUES
('Porta aberta', '2023-09-11 19:55:00', 'Acesso');
INSERT INTO EVENTO (DESCRICAO, DATA_DE_EVENTO, TIPO_DE_EVENTO) VALUES
('Pessoa suspeita', '2023-09-12 09:40:00', 'Segurança');

INSERT INTO EVENTO (DESCRICAO, DATA_DE_EVENTO, TIPO_DE_EVENTO) VALUES
('Alarme disparado', '2023-09-13 03:15:00', 'Emergência');
INSERT INTO EVENTO (DESCRICAO, DATA_DE_EVENTO, TIPO_DE_EVENTO) VALUES
('Entrada forçada', '2023-09-14 15:05:00', 'Intrusão');
INSERT INTO EVENTO (DESCRICAO, DATA_DE_EVENTO, TIPO_DE_EVENTO) VALUES
('Movimento irregular', '2023-09-15 16:25:00', 'Segurança');
INSERT INTO EVENTO (DESCRICAO, DATA_DE_EVENTO, TIPO_DE_EVENTO) VALUES
('Falha no sistema', '2023-09-16 17:55:00', 'Tecnologia');
INSERT INTO EVENTO (DESCRICAO, DATA_DE_EVENTO, TIPO_DE_EVENTO) VALUES
('Tentativa de acesso', '2023-09-17 20:35:00', 'Acesso');
INSERT INTO EVENTO (DESCRICAO, DATA_DE_EVENTO, TIPO_DE_EVENTO) VALUES
('Quebra de vidro', '2023-09-18 11:10:00', 'Intrusão');
INSERT INTO EVENTO (DESCRICAO, DATA_DE_EVENTO, TIPO_DE_EVENTO) VALUES
('Movimento detectado', '2023-09-19 13:20:00', 'Segurança');
INSERT INTO EVENTO (DESCRICAO, DATA_DE_EVENTO, TIPO_DE_EVENTO) VALUES
('Movimento detectado', '2023-08-10 14:30:00', 'Intrusão');
INSERT INTO EVENTO (DESCRICAO, DATA_DE_EVENTO, TIPO_DE_EVENTO) VALUES
('Movimento detectado', '2023-08-10 14:40:00', 'Intrusão');
INSERT INTO EVENTO (DESCRICAO, DATA_DE_EVENTO, TIPO_DE_EVENTO) VALUES
('Movimento detectado', '2023-08-10 14:50:00', 'Intrusão');

INSERT INTO CAMERA_EVENTO (ID_CAMERA, ID_EVENTO) VALUES (1, 1);
INSERT INTO CAMERA_EVENTO (ID_CAMERA, ID_EVENTO) VALUES (1, 2);
INSERT INTO CAMERA_EVENTO (ID_CAMERA, ID_EVENTO) VALUES (2, 3);
INSERT INTO CAMERA_EVENTO (ID_CAMERA, ID_EVENTO) VALUES (3, 4);
INSERT INTO CAMERA_EVENTO (ID_CAMERA, ID_EVENTO) VALUES (4, 5);
INSERT INTO CAMERA_EVENTO (ID_CAMERA, ID_EVENTO) VALUES (5, 6);
INSERT INTO CAMERA_EVENTO (ID_CAMERA, ID_EVENTO) VALUES (6, 7);
INSERT INTO CAMERA_EVENTO (ID_CAMERA, ID_EVENTO) VALUES (7, 8);
INSERT INTO CAMERA_EVENTO (ID_CAMERA, ID_EVENTO) VALUES (8, 9);
INSERT INTO CAMERA_EVENTO (ID_CAMERA, ID_EVENTO) VALUES (8, 10);
INSERT INTO REGISTRO_MONITORAMENTO (COD_FUNCIONARIO, ID_PREDIO,
PLANTAO, ID_EVENTO) VALUES (1, 1, '2023-09-10 14:30:00', 1);
INSERT INTO REGISTRO_MONITORAMENTO (COD_FUNCIONARIO, ID_PREDIO,
PLANTAO, ID_EVENTO) VALUES (1, 1, '2023-08-10 14:30:00', 1);
INSERT INTO REGISTRO_MONITORAMENTO (COD_FUNCIONARIO, ID_PREDIO,
PLANTAO, ID_EVENTO) VALUES (1, 1, '2023-07-10 14:30:00', 1);

INSERT INTO REGISTRO_MONITORAMENTO (COD_FUNCIONARIO, ID_PREDIO,
PLANTAO, ID_EVENTO) VALUES (2, 2, '2023-09-11 19:55:00', 2);
INSERT INTO REGISTRO_MONITORAMENTO (COD_FUNCIONARIO, ID_PREDIO,
PLANTAO, ID_EVENTO) VALUES (3, 3, '2023-09-12 09:40:00', 3);

INSERT INTO REGISTRO_MONITORAMENTO (COD_FUNCIONARIO, ID_PREDIO,
PLANTAO, ID_EVENTO) VALUES (4, 4, '2023-09-13 03:15:00', 4);
INSERT INTO REGISTRO_MONITORAMENTO (COD_FUNCIONARIO, ID_PREDIO,
PLANTAO, ID_EVENTO) VALUES (5, 5, '2023-09-14 15:05:00', 5);
INSERT INTO REGISTRO_MONITORAMENTO (COD_FUNCIONARIO, ID_PREDIO,
PLANTAO, ID_EVENTO) VALUES (6, 6, '2023-09-15 16:25:00', 6);
INSERT INTO REGISTRO_MONITORAMENTO (COD_FUNCIONARIO, ID_PREDIO,
PLANTAO, ID_EVENTO) VALUES (7, 7, '2023-09-16 17:55:00', 7);
INSERT INTO REGISTRO_MONITORAMENTO (COD_FUNCIONARIO, ID_PREDIO,
PLANTAO, ID_EVENTO) VALUES (8, 8, '2023-09-17 20:35:00', 8);
INSERT INTO REGISTRO_MONITORAMENTO (COD_FUNCIONARIO, ID_PREDIO,
PLANTAO, ID_EVENTO) VALUES (9, 9, '2023-09-18 11:10:00', 9);
INSERT INTO REGISTRO_MONITORAMENTO (COD_FUNCIONARIO, ID_PREDIO,
PLANTAO, ID_EVENTO) VALUES (10, 10, '2023-09-19 13:20:00', 10);

INSERT INTO MONITORAMENTO (COD_FUNCIONARIO, ID_PREDIO, PLANTAO)
VALUES (1, 1, '2023-09-10 14:30:00');
INSERT INTO MONITORAMENTO (COD_FUNCIONARIO, ID_PREDIO, PLANTAO)
VALUES (2, 2, '2023-09-11 19:55:00');
INSERT INTO MONITORAMENTO (COD_FUNCIONARIO, ID_PREDIO, PLANTAO)
VALUES (3, 3, '2023-09-12 09:40:00');
INSERT INTO MONITORAMENTO (COD_FUNCIONARIO, ID_PREDIO, PLANTAO)
VALUES (4, 4, '2023-09-13 03:15:00');
INSERT INTO MONITORAMENTO (COD_FUNCIONARIO, ID_PREDIO, PLANTAO)
VALUES (5, 5, '2023-09-14 15:05:00');
INSERT INTO MONITORAMENTO (COD_FUNCIONARIO, ID_PREDIO, PLANTAO)
VALUES (6, 6, '2023-09-15 16:25:00');
INSERT INTO MONITORAMENTO (COD_FUNCIONARIO, ID_PREDIO, PLANTAO)
VALUES (7, 7, '2023-09-16 17:55:00');
INSERT INTO MONITORAMENTO (COD_FUNCIONARIO, ID_PREDIO, PLANTAO)
VALUES (8, 8, '2023-09-17 20:35:00');
INSERT INTO MONITORAMENTO (COD_FUNCIONARIO, ID_PREDIO, PLANTAO)
VALUES (9, 9, '2023-09-18 11:10:00');
INSERT INTO MONITORAMENTO (COD_FUNCIONARIO, ID_PREDIO, PLANTAO)
VALUES (10, 10, '2023-09-19 13:20:00');




--—COMANDOS SELECT
-- SELECT SIMPLES , ULTILIZANDO FILTRO
SELECT *
FROM EVENTO
WHERE DATA_DE_EVENTO BETWEEN '2023-09-01' AND '2023-09-30';

-- COMANDOS SELECT COM INNERJOIN
-- LISTE TODOS OS EVENTOS REGISTRADOS EM CADA PREDIO
SELECT P.ENDERECO, E.DESCRICAO, E.DATA_DE_EVENTO
FROM EVENTO E
INNER JOIN REGISTRO_MONITORAMENTO RM ON E.ID_EVENTO = RM.ID_EVENTO
INNER JOIN PREDIO P ON RM.ID_PREDIO = P.ID_PREDIO;

-- LISTE TODOS OS FUNCIONARIOS , E ONDE OS MESMOS ESTAO ALOCADOS

SELECT F.NOME, P.ENDERECO
FROM FUNCIONARIO F
INNER JOIN MONITORAMENTO M ON F.COD_FUNCIONARIO = M.COD_FUNCIONARIO
INNER JOIN PREDIO P ON M.ID_PREDIO = P.ID_PREDIO;



-- liste todos os eventos que as cameras registraram
SELECT E.DESCRICAO, C.DESCRICAO AS CAMERA_DESCRICAO
FROM EVENTO E
INNER JOIN CAMERA_EVENTO CE ON E.ID_EVENTO = CE.ID_EVENTO
INNER JOIN CAMERA C ON CE.ID_CAMERA = C.ID_CAMERA;

--- Exemplo: Encontrar todos os prédios e, se houver, os eventos registrados neles


--- COMANDOS SELECT COM LEFT JOIN 
--- consulta com outer join Encontrar todos os prédios e, se houver, os eventos registrados neles (inclusivo para prédios sem eventos).
SELECT P.ID_PREDIO, P.ENDERECO, E.DESCRICAO AS EVENTO_DESCRICAO
FROM PREDIO P
LEFT JOIN REGISTRO_MONITORAMENTO RM ON P.ID_PREDIO = RM.ID_PREDIO
LEFT JOIN EVENTO E ON RM.ID_EVENTO = E.ID_EVENTO;



---- GROUP BY

-- cont numero de funcionarios por predio
SELECT P.ID_PREDIO, P.ENDERECO, COUNT(F.COD_FUNCIONARIO) AS NUM_FUNCIONARIOS
FROM PREDIO P
LEFT JOIN MONITORAMENTO M ON P.ID_PREDIO = M.ID_PREDIO
LEFT JOIN FUNCIONARIO F ON M.COD_FUNCIONARIO = F.COD_FUNCIONARIO
GROUP BY P.ID_PREDIO, P.ENDERECO;





--CONSULTA COM GRoUP BY Contar o número de eventos por tipo de evento.

SELECT TIPO_DE_EVENTO, COUNT(*) AS NUM_EVENTOS
FROM EVENTO
GROUP BY TIPO_DE_EVENTO;



-- Encontrar eventos que não têm registros de monitoramento associados / que ocorreram
--- OPERACAO DE CONJUNTO , EXCECPT
-- Encontrar eventos que ocorreram quando nenhum funcionário estava monitorando
SELECT E.ID_EVENTO, E.DESCRICAO, E.TIPO_DE_EVENTO, E.DATA_DE_EVENTO
FROM EVENTO E
WHERE E.ID_EVENTO IN (
SELECT ID_EVENTO
FROM EVENTO
EXCEPT
SELECT RM.ID_EVENTO
FROM REGISTRO_MONITORAMENTO RM
WHERE RM.PLANTAO IS NOT NULL
);






--- ENCONTRAR CAMERAS QUE NAO REGISTRARAM NENHUM EVENTO
--- SUBQUERY 	

SELECT C.ID_CAMERA, C.DESCRICAO
FROM CAMERA C
WHERE C.ID_CAMERA NOT IN (
    SELECT CE.ID_CAMERA
    FROM CAMERA_EVENTO CE
);



-- SUBQUERY
-- numero de cameras por predio
SELECT P.ENDERECO,
(SELECT COUNT(RM.ID_REGISTRO)
FROM REGISTRO_MONITORAMENTO RM
WHERE RM.ID_PREDIO = P.ID_PREDIO) AS NUM_EVENTOS
FROM PREDIO P
WHERE EXISTS (
SELECT 1
FROM REGISTRO_MONITORAMENTO RM
WHERE RM.ID_PREDIO = P.ID_PREDIO
)
ORDER BY NUM_EVENTOS DESC;




	
-- Encontrar eventos que não têm registros de monitoramento associados / que ocorreram
--- OPERACAO DE CONJUNTO , EXCECPT
-- Encontrar eventos que ocorreram quando nenhum funcionário estava monitorando

SELECT E.ID_EVENTO, E.DESCRICAO, E.TIPO_DE_EVENTO, E.DATA_DE_EVENTO
FROM EVENTO E
WHERE E.ID_EVENTO IN (
    SELECT ID_EVENTO
    FROM EVENTO
    EXCEPT
    SELECT RM.ID_EVENTO
    FROM REGISTRO_MONITORAMENTO RM
    WHERE RM.PLANTAO IS NOT NULL
);


---VISÕES
-- VISAO DE INSERCAO DE FUNCIONARIOS
CREATE VIEW VISAO_FUNCIONARIO AS
SELECT COD_FUNCIONARIO, NOME, IS_INSPETOR, EM_PLANTAO
FROM FUNCIONARIO;

INSERT INTO VISAO_FUNCIONARIO (NOME, IS_INSPETOR, EM_PLANTAO)
VALUES ('João Silva', TRUE, FALSE);
INSERT INTO VISAO_FUNCIONARIO (NOME, IS_INSPETOR, EM_PLANTAO)
VALUES ('Maria Oliveira', FALSE, TRUE);

select * from funcionario

--View de exeplo de uso
--Essa visão fornece uma visão consolidada sobre o monitoramento dos prédios e
--os eventos registrados pelas câmeras. Inclui informações sobre o prédio, funcionário,
--evento e a câmera que registrou o evento.

CREATE VIEW VISAO_MONITORAMENTO_EVENTOS AS
SELECT
P.ENDERECO AS ENDERECO_PREDIO,
F.NOME AS NOME_FUNCIONARIO,

E.DESCRICAO AS DESCRICAO_EVENTO,
E.DATA_DE_EVENTO AS DATA_EVENTO,
CE.ID_CAMERA AS ID_CAMERA
FROM
PREDIO P
JOIN
MONITORAMENTO M ON P.ID_PREDIO = M.ID_PREDIO
JOIN
FUNCIONARIO F ON M.COD_FUNCIONARIO = F.COD_FUNCIONARIO
JOIN
REGISTRO_MONITORAMENTO RM ON RM.ID_PREDIO = P.ID_PREDIO
JOIN
EVENTO E ON RM.ID_EVENTO = E.ID_EVENTO
JOIN
CAMERA_EVENTO CE ON CE.ID_EVENTO = E.ID_EVENTO
WHERE
M.PLANTAO = RM.PLANTAO;



SELECT *
FROM VISAO_MONITORAMENTO_EVENTOS;

---Essa visão fornece uma visão consolidada dos inspetores e
---seu monitoramento dos prédios, incluindo informações sobre
---quais prédios estão sendo monitorados e quais eventos foram registrados durante o
período.

CREATE VIEW VISAO_INSPETORES_E_MONITORAMENTO AS
SELECT
I.COD_INSPETOR,
F.NOME AS NOME_INSPETOR,
P.ENDERECO AS ENDERECO_PREDIO,
M.PLANTAO AS DATA_PLANTAO,
E.DESCRICAO AS DESCRICAO_EVENTO,
E.DATA_DE_EVENTO AS DATA_EVENTO
FROM
INSPETOR I
JOIN
FUNCIONARIO F ON I.COD_FUNCIONARIO = F.COD_FUNCIONARIO
JOIN
MONITORAMENTO M ON F.COD_FUNCIONARIO = M.COD_FUNCIONARIO

JOIN
PREDIO P ON M.ID_PREDIO = P.ID_PREDIO
LEFT JOIN
REGISTRO_MONITORAMENTO RM ON P.ID_PREDIO = RM.ID_PREDIO AND
M.PLANTAO = RM.PLANTAO
LEFT JOIN
EVENTO E ON RM.ID_EVENTO = E.ID_EVENTO;

SELECT *
FROM VISAO_INSPETORES_E_MONITORAMENTO


-- FUNÇÕES

-- Função que usa SUM
--Função para calcular o total de eventos registrados por uma câmera:
CREATE OR REPLACE FUNCTION total_eventos_por_camera(camera_id INT)
RETURNS INT AS $$
DECLARE
total_eventos INT;
BEGIN
SELECT COUNT(*)
INTO total_eventos
FROM CAMERA_EVENTO
WHERE ID_CAMERA = camera_id;
RETURN total_eventos;
END;
$$ LANGUAGE plpgsql;

---Função de uso exemplo

---Função com AVG e MIN
---Função para calcular a média e o menor tempo de plantão dos funcionários:
CREATE OR REPLACE FUNCTION media_menor_plantao()
RETURNS TABLE(média_intervalo INTERVAL, menor_intervalo INTERVAL) AS $$
BEGIN
RETURN QUERY
SELECT AVG(plantao) AS média_intervalo, MIN(plantao) AS menor_intervalo
FROM (
SELECT EXTRACT(EPOCH FROM (COALESCE(MAX(R.PLANTAO) -
MIN(R.PLANTAO), INTERVAL '0')) / 3600) AS plantao
FROM REGISTRO_MONITORAMENTO R
GROUP BY R.COD_FUNCIONARIO
) subquery;
END;
$$ LANGUAGE plpgsql;

-- Função com tratamento de exceção
--Função para obter o endereço do prédio dado um ID e lidar com casos onde o prédio não
existe:

CREATE OR REPLACE FUNCTION obter_endereco_predio(id_predio INT)
RETURNS VARCHAR AS $$
DECLARE
endereco VARCHAR;
BEGIN
SELECT ENDERECO
INTO endereco
FROM PREDIO
WHERE ID_PREDIO = id_predio;
IF NOT FOUND THEN
RAISE EXCEPTION 'Prédio com ID % não encontrado', id_predio;
END IF;
RETURN endereco;
END;
$$ LANGUAGE plpgsql;

--Procedure com justificativa semântica

—PROCEDURES
--Procedure para registrar um novo evento e associá-lo a uma câmera e a um prédio
específico:
CREATE OR REPLACE PROCEDURE registrar_evento(
p_descricao VARCHAR,
p_data TIMESTAMP,
p_tipo VARCHAR,
p_id_camera INT,
p_id_predio INT
)
LANGUAGE plpgsql
AS $$
BEGIN
-- Inserir novo evento
INSERT INTO EVENTO (DESCRICAO, DATA_DE_EVENTO, TIPO_DE_EVENTO)
VALUES (p_descricao, p_data, p_tipo);
-- Associar o evento à câmera
INSERT INTO CAMERA_EVENTO (ID_CAMERA, ID_EVENTO)
VALUES (p_id_camera, (SELECT currval(pg_get_serial_sequence('EVENTO',
'ID_EVENTO'))));
-- Associar o evento ao prédio
INSERT INTO REGISTRO_MONITORAMENTO (COD_FUNCIONARIO, ID_PREDIO,
PLANTAO, ID_EVENTO)
SELECT F.COD_FUNCIONARIO, p_id_predio, NOW(), (SELECT
currval(pg_get_serial_sequence('EVENTO', 'ID_EVENTO')))
FROM FUNCIONARIO F
JOIN MONITORAMENTO M ON F.COD_FUNCIONARIO = M.COD_FUNCIONARIO
WHERE M.ID_PREDIO = p_id_predio;
EXCEPTION
WHEN OTHERS THEN
RAISE NOTICE 'Erro ao registrar evento: %', SQLERRM;
ROLLBACK;
END;
$$;

select * from camera

--Trigger para Atualizar o Status de Plantão

—TRIGGERS
--Descrição: Atualiza o status de plantão dos funcionários quando um novo registro de
monitoramento é inserido.

CREATE OR REPLACE FUNCTION atualizar_status_plantao()
RETURNS TRIGGER AS $$
BEGIN
-- Atualiza o status de plantão para o funcionário associado
UPDATE FUNCIONARIO
SET EM_PLANTAO = TRUE
WHERE COD_FUNCIONARIO = NEW.COD_FUNCIONARIO;
RETURN NEW;
END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER trigger_atualizar_status_plantao
AFTER INSERT ON REGISTRO_MONITORAMENTO
FOR EACH ROW
EXECUTE FUNCTION atualizar_status_plantao();

--Trigger para Inserir Registro de Monitoramento com Evento
--Descrição: Cria automaticamente um registro de monitoramento para um prédio quando
um evento é registrado.

CREATE OR REPLACE FUNCTION inserir_registro_monitoramento()
RETURNS TRIGGER AS $$
BEGIN
-- Inserir um registro de monitoramento para o prédio onde o evento foi registrado
INSERT INTO REGISTRO_MONITORAMENTO (COD_FUNCIONARIO, ID_PREDIO,
PLANTAO, ID_EVENTO)
SELECT F.COD_FUNCIONARIO, C.ID_PREDIO, NOW(), NEW.ID_EVENTO
FROM CAMERA_EVENTO CE
JOIN CAMERA C ON CE.ID_CAMERA = C.ID_CAMERA
JOIN FUNCIONARIO F ON F.COD_FUNCIONARIO = (SELECT COD_FUNCIONARIO
FROM MONITORAMENTO M WHERE M.ID_PREDIO = C.ID_PREDIO LIMIT 1)
WHERE CE.ID_EVENTO = NEW.ID_EVENTO;
RETURN NEW;
END;

$$ LANGUAGE plpgsql;
CREATE TRIGGER trigger_inserir_registro_monitoramento
AFTER INSERT ON EVENTO
FOR EACH ROW
EXECUTE FUNCTION inserir_registro_monitoramento();

--Trigger para Atualizar Status de Câmera
--Descrição: Atualiza o status de uso de uma câmera para "inativa" quando ela não tem
eventos registrados por um período especificado.

CREATE OR REPLACE FUNCTION atualizar_status_camera()
RETURNS TRIGGER AS $$
BEGIN
-- Verifica se a câmera não registrou eventos nos últimos 30 dias
IF NOT EXISTS (
SELECT 1
FROM CAMERA_EVENTO CE
WHERE CE.ID_CAMERA = NEW.ID_CAMERA
AND CE.DATA_DE_EVENTO >= NOW() - INTERVAL '30 days'
) THEN
-- Atualiza o status da câmera para inativa
UPDATE CAMERA
SET STATUS = 'Inativa'
WHERE ID_CAMERA = NEW.ID_CAMERA;
END IF;
RETURN NEW;
END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER trigger_atualizar_status_camera
AFTER INSERT ON CAMERA_EVENTO
FOR EACH ROW
EXECUTE FUNCTION atualizar_status_camera();
SCRIPTS BD2 ATUALIZADO.txt
Exibindo SCRIPTS BD2 ATUALIZADO.txt.


--- inidices ---- 

--- vai otimizar essas consultas que envolvem a busca de registros de funcionários em plantão.
CREATE INDEX idx_cod_funcionario_monitoramento
ON REGISTRO_MONITORAMENTO (COD_FUNCIONARIO);



----Esse índice será especialmente útil para consultas que
----buscam por eventos registrados por múltiplas câmeras: 

CREATE INDEX idx_id_evento_camera_evento
ON CAMERA_EVENTO (ID_EVENTO);


--- Melhora o desempenho em consultas que relacionam prédios com seus registros de monitoramento.
CREATE INDEX idx_id_predio_monitoramento
ON REGISTRO_MONITORAMENTO (ID_PREDIO);




--- REFAZENDO CONSULTAS 

--- CONSULTA ANTIGA

SELECT P.ENDERECO, E.DESCRICAO, E.DATA_DE_EVENTO
FROM EVENTO E
INNER JOIN REGISTRO_MONITORAMENTO RM ON E.ID_EVENTO = RM.ID_EVENTO
INNER JOIN PREDIO P ON RM.ID_PREDIO = P.ID_PREDIO;


--- CONSULTA REFEITA 
---  A consulta original com INNER JOIN apenas retorna prédios
---que têm eventos registrados, o que pode não atender ao requisito de listar todos os prédios.

SELECT P.ENDERECO, E.DESCRICAO AS EVENTO_DESCRICAO, E.DATA_DE_EVENTO
FROM PREDIO P
LEFT JOIN REGISTRO_MONITORAMENTO RM ON P.ID_PREDIO = RM.ID_PREDIO
LEFT JOIN EVENTO E ON RM.ID_EVENTO = E.ID_EVENTO;



--- ANTIGA
SELECT P.ID_PREDIO, P.ENDERECO, COUNT(F.COD_FUNCIONARIO) AS NUM_FUNCIONARIOS
FROM PREDIO P
LEFT JOIN MONITORAMENTO M ON P.ID_PREDIO = M.ID_PREDIO
LEFT JOIN FUNCIONARIO F ON M.COD_FUNCIONARIO = F.COD_FUNCIONARIO
GROUP BY P.ID_PREDIO, P.ENDERECO;

---  A consulta original poderia contar o mesmo funcionário mais de uma vez
---se ele estiver associado a múltiplos registros.
SELECT P.ID_PREDIO, P.ENDERECO, COUNT(DISTINCT M.COD_FUNCIONARIO) AS NUM_FUNCIONARIOS
FROM PREDIO P
LEFT JOIN MONITORAMENTO M ON P.ID_PREDIO = M.ID_PREDIO
GROUP BY P.ID_PREDIO, P.ENDERECO;







